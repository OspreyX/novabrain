{
    "name": "novabrain",
    "version": "0.1.2",
    "id": "novabrain",
    "_id": "novabrain@0.1.2",
    "_from": "novabrain@*",
    "description": "Neural network module",
    "keywords": [
        "perceptron",
        "neural network",
        "brain",
        "genetic algorithm",
        "classifier",
        "machine learning",
        "artificial intelligence"
    ],
    "license": "MIT",
    "author": "Fran√ßois Mathey <fmathey81@gmail.com>",
    "repository": {
        "type": "git",
        "url": "git@github.com:fmathey/novabrain.git",
        "web": "https://github.com/fmathey/novabrain"
    },
    "bugs": {
        "url": "https://github.com/fmathey/novabrain/issues"
    },
    "devDependencies": {
        "mocha": ">=1.20.1"
    },
    "dependencies": {
        
    },
    "directories": {
        "lib": "./src"
    },
    "scripts": {
        "test": "mocha"
    },
    "engines": {
        "node": ">=0.10.28"
    },
    "readme": "# Novabrain\n\nNovabrain is a Node.js [neural network](http://en.wikipedia.org/wiki/Artificial_neural_network) module.\nAt this moment training is made with a genetic algorithm.\n\n```\n$ npm install novabrain\n```\n\nThis example shows how the neural network is trained to learn XOR with Genetic Algorithm\n\n```javascript\nvar assert = require('assert');\nvar novabrain = require('novabrain');\n\nvar network = new novabrain.Network({\n    numberOfInputs: 2,\n    numberOfOutputs: 1,\n    numberOfHiddenLayers: 2,\n    numberOfNeuronsPerHiddenLayer : 5,\n});\n\nvar trainer = new novabrain.GeneticTrainer({\n    populationSize : 400,\n    maxIterations  : 2000,\n    mutationRate   : 0.8,\n    survivalRate   : 0.3,\n    maxPerbutation : 0.9,\n    errorThreshold : 0.005,\n    floodCallback: function(data) {\n        console.log(data);\n    }\n});\n\ntrainer.train(network, [ \n    { input: [0,0], output: [0] },\n    { input: [0,1], output: [1] },\n    { input: [1,0], output: [1] },\n    { input: [1,1], output: [0] },\n]);\n\nassert.strictEqual(Math.round(network.run([0,0]) * 1) / 1, 0);\nassert.strictEqual(Math.round(network.run([0,1]) * 1) / 1, 1);\nassert.strictEqual(Math.round(network.run([1,0]) * 1) / 1, 1);\nassert.strictEqual(Math.round(network.run([1,1]) * 1) / 1, 0);\n```\nMocha is used for unit testing\n```\n$ npm install mocha -g\n$ mocha\n$ mocha test\n$ mocha test/neuron\n$ ...\n```\n",
    "readmeFilename": "README.md"
}